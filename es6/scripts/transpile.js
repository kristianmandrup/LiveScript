// Generated by LiveScript 1.2.0
(function(){
  var LiveScript, slurp, spit, tweak, path, compileEs6;
  LiveScript = require('../lib');
  slurp = require('./base').slurp;
  spit = require('./base').spit;
  tweak = require('./base').tweak;
  path = require('path');
  compileEs6 = require('./compile');
  function traceurTranspile(filePath){
    var source, traceur, reporter, sourceFile, tree, TreeWriter, javascript, transpiledFile;
    source = slurp(filePath);
    traceur = require('node-traceur');
    reporter = new traceur.util.MutedErrorReporter();
    sourceFile = new traceur.syntax.SourceFile(filePath, source);
    tree = traceur.codegeneration.Compiler.compileFile(reporter, sourceFile, filePath);
    TreeWriter = traceur.outputgeneration.TreeWriter;
    javascript = TreeWriter.write(tree, false);
    transpiledFile = tweak(filePath, '-es5.js');
    return writeFile(transpiledFile, javascript);
  }
  function transpileEs6(){
    var files;
    compileEs6();
    files = dir('es6/test/');
    if (!(in$('--harmony', process.execArgv) || in$('--harmony-generators', process.execArgv))) {
      say("Missing --harmony node option");
      return;
    }
    files = ['block_scoping.ls'];
    return files.forEach(function(file){
      var jsFile, filename;
      jsFile = tweak(file, '.js');
      filename = path.join('es6/test', jsFile);
      return transpileTraceur(filename);
    });
  }
  module.exports = transpileEs6;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
